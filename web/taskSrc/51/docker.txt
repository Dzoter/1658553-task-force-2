вщсdocker version
docker ps-a посмотреть все контейнеры/ без a посмотреть только запущенные контейнеры
docker images список локальных образов на компуктере

docker run hello world  docker run -запускает контейнер, hello-world название образа. если такого образа локально нет докер обратится на докер хаб
можно найти образ на докер хабе и скачать образ docker pull (название образа) но имеет смысл тогда делать то, что выше. он сам скачает ^

docker run hello world:тег для конкретного образа (версия)
docker rm id/имя контейнера который хотим удалить

docker run -it название образа - it интерактивный терминал -подключение к контейнеру этого образа.

exit выходит из контейнера и контейнер выключается

docker container prune - удаляет все контейнеры которые остановлены 
docker run -d nginx
^запуск контейнера ^в фоновом режиме (deteachd) название образа

docker container inspect id контейнера
посмотреть инфу о контейнере


docker container inspect id | grep что то конкретное - вывести какой то конкретный параметр 

docker stop id контейнера-оставновить контейнер запущенный в фоновом режиме

docker kill id остановить процесс контейнера моментально

docker exec -it id bash запуск процесса внутри контейнера, в данном случае bash, если контейнер запущен

docker run -d --name кастомное_имя название_образа придумать кастомное название контейнеру

docker run -p 8080:80 nginx  -p _публикация порта(делает порт публичным) 8080 - внешний порт, порт компуктера, 80 - порт контейнера (глянь заранее но скорее всего он 80)
nginx -название образа, ну ты знаешь

docker run -v ${PWD}:/usr/share/nginx/html nginx  -v значит подключение тома, PWD это путь к папке, можно прямой. /usr/>>>>>/html -путь в папке внутри контейнера 
docker run -d --rm nginx рм удаляет контейнер после его остановки автоматически

перенос строк в командах через слеш
docker run \
---name my-nginx \
-v ${PWD}:/path/ \
-p 8888:80 \
-d \
--rm \
nginx


для создания образа необходимо
создать докер файл 1 docefile для 1 образа=> в корне папки приложения

докер файл

FROM python:alpine указываем какой базовый образ используется для моего кастомного образа базовый образ питон:версия(тег) алпайн, если тега нет то тег latest
WORKDIR /app рабочая директория внутри образа, внутри образа создана папка app. Рекомендуется создавать отдельную папку, куда будет записываться весь проект, что бы не удалить
системные файлы в корне директории
COPY . . копируем все фалы из локальной текущей папки (первая точка) в папку ворк дир внутри контейнера (2 точка)
CMD ["python","main.py"] запускаем процесс, в данном случае пайтон открывает майн.py который находится в /app

docker build . запуск процесса создания образа в папке . что означает текущую папку. докер пытается найти докер файл в текущей директории и если находит творит магию
docker build . -t my-calendar:4.1.3 где -t добавление имени и тегэ для образа а mycal/// название образа а : и далее это тег образа, если тег опускаем то докер добавляет тег лейтест
